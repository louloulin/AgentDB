# Kubernetes deployment configuration for AgentMem
# Production-ready deployment with high availability and auto-scaling

apiVersion: v1
kind: Namespace
metadata:
  name: agentmem
  labels:
    name: agentmem

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: agentmem-config
  namespace: agentmem
data:
  RUST_LOG: "info"
  AGENT_MEM_PORT: "8080"
  AGENT_MEM_HOST: "0.0.0.0"
  AGENT_MEM_ENABLE_CORS: "true"
  AGENT_MEM_ENABLE_AUTH: "true"
  AGENT_MEM_VECTOR_STORE: "qdrant"

---
apiVersion: v1
kind: Secret
metadata:
  name: agentmem-secrets
  namespace: agentmem
type: Opaque
data:
  # Base64 encoded values
  database-password: cGFzc3dvcmQ=  # password
  redis-password: cGFzc3dvcmQ=     # password
  neo4j-password: cGFzc3dvcmQ=     # password
  jwt-secret: c3VwZXJfc2VjcmV0X2tleQ==  # super_secret_key

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: agentmem-server
  namespace: agentmem
  labels:
    app: agentmem-server
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
  selector:
    matchLabels:
      app: agentmem-server
  template:
    metadata:
      labels:
        app: agentmem-server
    spec:
      serviceAccountName: agentmem-service-account
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        fsGroup: 1001
      containers:
      - name: agentmem-server
        image: agentmem/server:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
          name: http
        env:
        - name: AGENT_MEM_DATABASE_URL
          value: "postgresql://agentmem:$(DATABASE_PASSWORD)@postgres-service:5432/agentmem"
        - name: AGENT_MEM_REDIS_URL
          value: "redis://:$(REDIS_PASSWORD)@redis-service:6379"
        - name: AGENT_MEM_QDRANT_URL
          value: "http://qdrant-service:6333"
        - name: AGENT_MEM_NEO4J_URL
          value: "bolt://neo4j-service:7687"
        - name: AGENT_MEM_NEO4J_USER
          value: "neo4j"
        - name: AGENT_MEM_NEO4J_PASSWORD
          valueFrom:
            secretKeyRef:
              name: agentmem-secrets
              key: neo4j-password
        - name: DATABASE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: agentmem-secrets
              key: database-password
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: agentmem-secrets
              key: redis-password
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: agentmem-secrets
              key: jwt-secret
        envFrom:
        - configMapRef:
            name: agentmem-config
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        volumeMounts:
        - name: data-volume
          mountPath: /app/data
        - name: logs-volume
          mountPath: /app/logs
        - name: config-volume
          mountPath: /app/config
          readOnly: true
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
      volumes:
      - name: data-volume
        persistentVolumeClaim:
          claimName: agentmem-data-pvc
      - name: logs-volume
        persistentVolumeClaim:
          claimName: agentmem-logs-pvc
      - name: config-volume
        configMap:
          name: agentmem-config

---
apiVersion: v1
kind: Service
metadata:
  name: agentmem-service
  namespace: agentmem
  labels:
    app: agentmem-server
spec:
  type: ClusterIP
  ports:
  - port: 8080
    targetPort: 8080
    protocol: TCP
    name: http
  selector:
    app: agentmem-server

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: agentmem-ingress
  namespace: agentmem
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    cert-manager.io/cluster-issuer: letsencrypt-prod
spec:
  tls:
  - hosts:
    - agentmem.example.com
    secretName: agentmem-tls
  rules:
  - host: agentmem.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: agentmem-service
            port:
              number: 8080

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: agentmem-hpa
  namespace: agentmem
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: agentmem-server
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: agentmem-data-pvc
  namespace: agentmem
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  storageClassName: fast-ssd

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: agentmem-logs-pvc
  namespace: agentmem
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
  storageClassName: standard

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: agentmem-service-account
  namespace: agentmem

---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: agentmem
  name: agentmem-role
rules:
- apiGroups: [""]
  resources: ["pods", "services", "endpoints"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["apps"]
  resources: ["deployments", "replicasets"]
  verbs: ["get", "list", "watch"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: agentmem-role-binding
  namespace: agentmem
subjects:
- kind: ServiceAccount
  name: agentmem-service-account
  namespace: agentmem
roleRef:
  kind: Role
  name: agentmem-role
  apiGroup: rbac.authorization.k8s.io

---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: agentmem-pdb
  namespace: agentmem
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: agentmem-server

---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: agentmem-network-policy
  namespace: agentmem
spec:
  podSelector:
    matchLabels:
      app: agentmem-server
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    ports:
    - protocol: TCP
      port: 8080
  - from:
    - podSelector:
        matchLabels:
          app: prometheus
    ports:
    - protocol: TCP
      port: 8080
  egress:
  - to:
    - podSelector:
        matchLabels:
          app: postgres
    ports:
    - protocol: TCP
      port: 5432
  - to:
    - podSelector:
        matchLabels:
          app: redis
    ports:
    - protocol: TCP
      port: 6379
  - to:
    - podSelector:
        matchLabels:
          app: qdrant
    ports:
    - protocol: TCP
      port: 6333
  - to:
    - podSelector:
        matchLabels:
          app: neo4j
    ports:
    - protocol: TCP
      port: 7687
  - to: []
    ports:
    - protocol: TCP
      port: 53
    - protocol: UDP
      port: 53
    - protocol: TCP
      port: 443
